#include<iostream>
using namespace std;
class Student;
class Mentor;


class Skill{
int SkillId;
string skillname;
string description;

public:
Skill(int skillid,string skillname,string description){
this->SkillId=skillid;
this->skillname=skillname;
this->description=description;	
}

void showskilldetails(){
cout<<"--------skill Details---------"<<endl;
cout<<"Skill ID: "<<SkillId<<endl;
cout<<"Skill Name: "<<skillname<<endl;
cout<<"Description: "<<description<<endl;	
}

void updateskilldetails(string newDescription){
description=newDescription;
}

	
	
};



class Sports{
int sportid;
string name;
string description;
Skill *requiredskill[5]; 
int countskill;
public:
Sports(int sportid,string name,string description){
this->sportid=sportid;
this->name=name;
this->description=description;
countskill=0;

}

~Sports(){
for(int i=0;i<5;i++){
requiredskill[i]=NULL;	
}
	
}

void addskill(Skill *s){
if(countskill<5){

requiredskill[countskill++]=s;	
}
}

void removeskill(Skill *s){


for(int i=0;i<countskill;i++){
if(requiredskill[i]==s){
for(int j=i;j<countskill-1;j++){
requiredskill[j]=requiredskill[j+1];	
}
countskill--;
}
}	
}


void display(){
cout<<"Sports Name: "<<name<<endl;	
cout<<"Sports ID: "<<sportid<<endl;
cout<<"Description: "<<description<<endl;
for(int i=0;i<countskill;i++){
requiredskill[i]->showskilldetails();	
}
}
};




class Student{
int age;
int StudentID;
string name;
Sports *sportsIntrest[5];
Mentor  *mentorassigned;
int sportcount;

public:
Student(string name,int age,int StudentID){
this->name=name;
this->age=age;
this->StudentID=StudentID;
sportcount=0;
mentorassigned=NULL;
for(int i=0;i<5;i++){
sportsIntrest[i]=NULL;	
}

}

~Student(){
mentorassigned=NULL;
for(int i=0;i<5;i++){
sportsIntrest[i]=NULL;	
}
	
}

void display(){
cout<<"Name: "<<name<<endl;
cout<<"Student ID: "<<StudentID<<endl;
cout<<"Age: "<<age<<endl;	
}
void viewmentordetails();


void registerformentorship(Mentor *m){
mentorassigned=m;	
}

void updatesportsintrests(Sports *s){
for(int i=0;i<sportcount;i++){
if(sportsIntrest[i]==s){
cout<<"Already Added: "<<endl;
return ;	
}	
}
if(sportcount<5){

sportsIntrest[sportcount++]=s;
cout<<"Successfully Updated: "<<endl;	
}
else{
	cout<<"OOPS! CAPICITY IS FULL! "<<endl;
}
}
};

class Student;
class Mentor{
string name;
int mentorid;
Sports *sportsexpertise[5];
int maxlearners;
Student *assignlearners[5];

public:
Mentor(string name,int mentorid){
this->name=name;
this->mentorid=mentorid;
 maxlearners=0;	
}

void AssignLearners(Student *s){
if(maxlearners<5){
assignlearners[maxlearners++]=s;	
}
else{
cout<<"Full of capicity: "<<endl;	
}
	
}

void removelearners(Student *s){
for(int i=0;i<maxlearners;i++){
if(assignlearners[i]==s){

for(int j=i;j<maxlearners-1;j++){
assignlearners[j]=assignlearners[j+1];	
}
maxlearners--;	
}	
}	
}


void viewlearners(){
cout<<"Assign learners: "<<endl;
for(int i=0;i<maxlearners;i++){
assignlearners[i]->display();
}
}

void Provideguidance(){
cout<<"Providing Guidance Listen CareFully!: "<<endl;	
}

int getmentorid(){
return mentorid;	
}

string getname(){
return name;	
}


};

void Student::viewmentordetails(){
cout<<"Mentor Details: "<<endl;
cout<<"Name: "<<mentorassigned->getname()<<endl;
cout<<"Mentor ID: "<<mentorassigned->getmentorid()<<endl;	
}


int main() {
   
cout<<"------------------------------HARSH-KUMAR-----------------------"<<endl;
cout<<"---------------------------------24k-0912-----------------------"<<endl; 
   
Skill skill1(101, "Dribbling", "Ability to control the ball while running.");
Skill skill2(102, "Shooting", "Precision in scoring goals.");
Skill skill3(103, "Swimming Techniques", "Mastery over different strokes.");
      
Sports football(1, "Football", "A team sport played with a spherical ball.");
Sports swimming(2, "Swimming", "An individual water sport.");
    
   
football.addskill(&skill1);
football.addskill(&skill2);
swimming.addskill(&skill3);

   
Student student1("Harsh", 19, 1001);
Student student2("Alyeesha", 20, 1002);
    
   
Mentor mentor1("Talha", 2001);
Mentor mentor2("Sarah", 2002);


student1.registerformentorship(&mentor1);
student2.registerformentorship(&mentor2);
    
   
cout<<"\n===== Student Details ====="<<endl;
student1.display();
student1.viewmentordetails();
    
student2.display();
student2.viewmentordetails();

   
mentor1.AssignLearners(&student1);
mentor2.AssignLearners(&student2);
   
cout<<"\n===== Mentor Learners ====="<<endl;
mentor1.viewlearners();
mentor2.viewlearners();

cout<<"\n===== Sports Details ====="<<endl;
football.display();
swimming.display();

return 0;
}
